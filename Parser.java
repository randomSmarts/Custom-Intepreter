import java.util.List;

class Parser {
    private final List<Token> tokens;  // List of tokens generated by the lexer
    private int pos = 0;  // The current position in the token list

    // Constructor to initialize the list of tokens
    public Parser(List<Token> tokens) {
        this.tokens = tokens;
    }

    // Method to get the current token
    private Token currentToken() {
        return tokens.get(pos);
    }

    // Method to advance to the next token
    private void advance() {
        pos++;
    }

    // Method to consume a token of the expected type
    private Token eat(TokenType type) {
        Token token = currentToken();
        if (token.type == type) {
            advance();
        } else {
            throw new RuntimeException("Expected token: " + type + " but got " + token.type);
        }
        return token;
    }

    // Method to parse a factor (either a number or a variable)
    private Expression parseFactor() {
        Token token = currentToken();
        if (token.type == TokenType.NUMBER) {
            eat(TokenType.NUMBER);
            return new NumberExpression(Integer.parseInt(token.value));  // Return a number expression
        }
        if (token.type == TokenType.IDENTIFIER) {
            String varName = token.value;
            eat(TokenType.IDENTIFIER);
            return new VariableExpression(varName);  // Return a variable expression
        }
        throw new RuntimeException("Unexpected token: " + token);
    }

    // Method to parse a term (handles * and / operations)
    private Expression parseTerm() {
        Expression result = parseFactor();
        while (currentToken().type == TokenType.MULTIPLY || currentToken().type == TokenType.DIVIDE) {
            Token token = currentToken();
            String operator = token.value;
            eat(token.type);
            result = new BinaryOperationExpression(result, operator, parseFactor());  // Return a binary operation expression
        }
        return result;
    }

    // Method to parse an expression (handles + and - operations)
    private Expression parseExpression() {
        Expression result = parseTerm();
        while (currentToken().type == TokenType.PLUS || currentToken().type == TokenType.MINUS) {
            Token token = currentToken();
            String operator = token.value;
            eat(token.type);
            result = new BinaryOperationExpression(result, operator, parseTerm());  // Return a binary operation expression
        }
        return result;
    }

    // Method to parse an assignment or an expression
    public Expression parse() {
        Token token = currentToken();
        if (token.type == TokenType.IDENTIFIER) {
            String varName = token.value;
            eat(TokenType.IDENTIFIER);
            eat(TokenType.ASSIGN);
            Expression value = parseExpression();  // Parse the right-hand side
            return new AssignExpression(varName, value);  // Return an assignment expression
        }
        return parseExpression();  // Otherwise, parse as an expression
    }
}

/*
Explanation:
	•	The Parser class processes the list of tokens generated by the lexer and converts them into an abstract syntax tree (AST) composed of Expression objects.
	•	Methods like parseFactor() handle individual numbers or variables, while parseTerm() and parseExpression() handle binary operations and build up the structure of the AST.
 */